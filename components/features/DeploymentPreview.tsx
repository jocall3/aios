import React, { useState, useCallback, useRef, useEffect, Suspense } from 'react';
import { Canvas } from '@react-three/fiber';
import { Stars, Text } from '@react-three/drei';
import * as THREE from 'three';
import { getAllFiles } from '../../services/dbService';
import { deployToEdge, getDeploymentAnalytics } from '../../services/EdgeDeploymentAI'; // Invented AI Service
import type { GeneratedFile, EdgeDeployment, DeploymentAnalytics } from '../../types/EdgeDeployment'; // Invented
import { CloudIcon, GlobeAltIcon, LinkIcon } from '../icons';
import { LoadingSpinner } from '../shared';

const a = new THREE.Vector3(), b = new THREE.Vector3(), c = new THREE.Vector3();

// --- COMPONENTS ---
const a = new THREE.Vector3(), b = new THREE.Vector3(), c = new THREE.Vector3();

// --- Live World Map Visualization ---
const a = new THREE.Vector3(), b = new THREE.Vector3(), c = new THREE.Vector3();

const WorldMap: React.FC<{ analytics: DeploymentAnalytics | null }> = ({ analytics }) => {
    const globeRef = useRef<THREE.Mesh>(null);
    useFrame((_, delta) => { if(globeRef.current) globeRef.current.rotation.y += delta * 0.1; });

    return (
        <group>
            <Stars radius={100} depth={50} count={5000} factor={4} saturation={0} fade speed={1} />
            <mesh ref={globeRef}>
                <sphereGeometry args={[2, 32, 32]} />
                <meshStandardMaterial color="#0047AB" wireframe emissive="#3b82f6" emissiveIntensity={0.2} />
            </mesh>
            {/* Simulate live traffic pings */}
            {analytics && Array.from({length: 5}).map((_, i) => {
                const lat = (Math.random() - 0.5) * 180;
                const lon = (Math.random() - 0.5) * 360;
                const phi = (90 - lat) * (Math.PI / 180);
                const theta = (lon + 180) * (Math.PI / 180);
                const pos = new THREE.Vector3(-Math.sin(phi) * Math.cos(theta), Math.cos(phi), -Math.sin(phi) * Math.sin(theta)).multiplyScalar(2.05);
                return <mesh key={i} position={pos}><sphereGeometry args={[0.03, 8, 8]} /><meshBasicMaterial color="#4ade80" toneMapped={false} /></mesh>;
            })}
        </group>
    );
};


export const DeploymentPreview: React.FC = () => {
    const [files, setFiles] = useState<GeneratedFile[]>([]);
    const [deployment, setDeployment] = useState<EdgeDeployment | null>(null);
    const [analytics, setAnalytics] = useState<DeploymentAnalytics | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        const loadFiles = async () => {
            setIsLoading(true); setError('');
            try {
                const allFiles = await getAllFiles();
                if (allFiles.length === 0) setError('No files generated by AI Feature Builder found.');
                setFiles(allFiles);
            } finally { setIsLoading(false); }
        };
        loadFiles();
    }, []);
    
    useEffect(() => {
        if(!deployment) return;
        const interval = setInterval(async () => {
            const newAnalytics = await getDeploymentAnalytics(deployment.id);
            setAnalytics(newAnalytics);
        }, 2000);
        return () => clearInterval(interval);
    }, [deployment]);

    const handleDeploy = useCallback(async () => {
        setIsLoading(true); setDeployment(null); setAnalytics(null);
        try {
            const result = await deployToEdge(files);
            setDeployment(result);
        } finally { setIsLoading(false); }
    }, [files]);
    
    return (
        <div className="h-full flex flex-col p-4 sm:p-6 lg:p-8 text-text-primary">
            <header className="mb-4">
                <h1 className="text-3xl font-bold flex items-center"><CloudIcon /><span className="ml-3">Globally Distributed Edge Deployment & Analytics Console</span></h1>
                <p className="text-text-secondary mt-1">Manifest generated assets onto a live, global edge network and monitor real-time performance.</p>
            </header>

            <div className="flex-grow grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 min-h-0">
                 <div className="lg:col-span-1 flex flex-col gap-3">
                     <h3 className="font-bold text-lg">Deployment Manifest</h3>
                     <div className="bg-surface p-2 border rounded-lg flex-grow overflow-y-auto">
                        {isLoading && files.length === 0 ? <LoadingSpinner/> :
                            files.length > 0 ? (
                                <ul className="text-sm font-mono space-y-1">{files.map(f => <li key={f.filePath} className="truncate p-1">{f.filePath}</li>)}</ul>
                            ) : <p className="text-xs p-4 text-center">{error}</p>
                        }
                     </div>
                      <button onClick={handleDeploy} disabled={isLoading || files.length === 0} className="btn-primary w-full py-3 font-bold">
                         {isLoading ? <LoadingSpinner/> : 'DEPLOY TO GLOBAL EDGE'}
                      </button>
                 </div>
                 
                 <div className="lg:col-span-2 flex flex-col min-h-0">
                    <h3 className="font-bold text-lg mb-2 flex items-center gap-2"><GlobeAltIcon/> Live Analytics Console</h3>
                     <div className="flex-grow bg-black rounded-lg relative overflow-hidden">
                        <Canvas camera={{ position: [0, 0, 5], fov: 60 }}>
                             <Suspense fallback={null}><WorldMap analytics={analytics} /></Suspense>
                        </Canvas>
                         <div className="absolute top-2 left-2 text-xs font-mono bg-black/50 p-2 rounded">
                            <p>STATUS: <span className={deployment?.status==='LIVE'?'text-green-400':'text-yellow-400'}>{deployment?.status || 'AWAITING DEPLOYMENT'}</span></p>
                             {deployment && <p className="flex items-center gap-1"><LinkIcon/><a href={deployment.url} target="_blank" rel="noreferrer" className="underline">{deployment.url}</a></p>}
                         </div>
                         <div className="absolute bottom-2 right-2 text-xs font-mono bg-black/50 p-2 rounded text-right">
                             <p>REQUESTS/s: {analytics?.requestsPerSecond || 0}</p>
                             <p>P95 LATENCY: {analytics?.p95Latency || 0}ms</p>
                             <p>COST: ${(analytics?.cost || 0).toFixed(6)}</p>
                         </div>
                     </div>
                 </div>

            </div>
        </div>
    );
};